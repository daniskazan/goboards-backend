[tool.poetry]
name = "backend-fastapi"
version = "0.1.0"
description = ""
authors = ["Danis Sharafiev <d.sharafiev@bars-open.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.1"
pydantic-settings = "^2.3.4"
httpx = "^0.27.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.31"}
returns = "^0.23.0"
alembic = "^1.13.2"
pydantic = {extras = ["pydantic-settings"], version = "^2.8.2"}
asyncpg = {extras = ["asyncio"], version = "^0.29.0"}
pyjwt = "^2.8.0"
passlib = "^1.7.4"
bcrypt = "^4.2.0"

[tool.ruff]
src = ["src", "tests"]
exclude = [
    "alembic"
]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
select = ["ALL", "I"]
ignore = [
    "ANN",     # Mypy is better at this
    "ARG",     # unused arguments are common w/ interfaces
    "C901",    # sometimes you trade complexity for performance
    "COM",     # Formatter takes care of our commas
    "D",       # We prefer our own docstring style.
    "E501",    # leave line-length enforcement to formatter
    "EM101",   # simple strings are fine
    "FBT",     # bools are our friends
    "FIX",     # Yes, we want XXX as a marker.
    "INP001",  # sometimes we want Python files outside of packages
    "ISC001",  # conflicts with formatter
    "N802",    # some names are non-pep8 due to stdlib logging / Twisted
    "N803",    # ditto
    "N806",    # ditto
    "PLR0913", # leave complexity to me
    "PLR2004", # numbers are sometimes fine
    "PLW2901", # overwriting a loop var can be useful
    "RUF001",  # leave my smart characters alone
    "RUF001",  # leave my smart characters alone
    "SLF001",  # private members are accessed by friendly functions
    "TCH",     # TYPE_CHECKING blocks break autodocs
    "TD",      # we don't follow other people's todo style
    "TID252",  # Relative imports are fine
    "TRY003",  # simple strings are fine
    "TRY004",  # too many false negatives
    "TRY300",  # else blocks are nice, but code-locality is nicer
    "PTH",     # pathlib can be slow, so no point to rewrite
    "RUF002",
    "B008",
    "DTZ011"
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "B018",    # "useless" expressions can be useful in tests
    "BLE",     # tests have different rules around exceptions
    "EM",      # tests have different rules around exceptions
    "LOG001",  # need to instantiate log messages in tests
    "PLC1901", # empty strings are falsey, but are less specific in tests
    "RUF012",  # no type hints in tests
    "S",       # it's test; chill out security
    "SIM300",  # Yoda rocks in tests
    "TRY",     # tests have different rules around exceptions
]

[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2


[tool.poetry.group.dev.dependencies]
ruff = "^0.5.2"
isort = "^5.13.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
